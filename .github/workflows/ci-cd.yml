name: TR-808 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_production:
        description: 'Deploy to production VPS'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and validate code
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier check
        run: npx prettier --check "*.html" "*.css" "*.js" || true

      - name: HTML validation
        uses: Cyb3r-Jak3/html5validator-action@v7.2.0
        with:
          root: ./
          css: true
          format: json

  # Build and test
  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          mkdir -p dist
          cp tr808-mvp.html dist/index.html
          echo "Build completed successfully"

      - name: Run basic tests
        run: |
          # Test HTML structure
          grep -q "TR-808 AI" dist/index.html
          grep -q "Tone.js" dist/index.html
          echo "Basic tests passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tr808-build
          path: dist/

  # Build Docker image
  docker-build:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: tr808-build
          path: dist/

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deploy to DEV-GPU for testing
  deploy-dev-gpu:
    runs-on: self-hosted
    needs: docker-build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment: dev-gpu
    steps:
      - name: Deploy to DEV-GPU for testing
        run: |
          echo "Deploying to DEV-GPU test environment (100.106.201.33)"
          
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop existing test container
          docker stop tr808-test || true
          docker rm tr808-test || true
          
          # Run new test container
          docker run -d \
            --name tr808-test \
            --restart unless-stopped \
            -p 3001:80 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          echo "DEV-GPU test deployment completed: http://100.106.201.33:3001"

  # Comprehensive testing on DEV-GPU
  test-dev-gpu:
    runs-on: self-hosted
    needs: deploy-dev-gpu
    environment: dev-gpu
    steps:
      - name: Wait for container to be ready
        run: |
          echo "Waiting for container to be healthy..."
          sleep 30
          
          # Health check with retries
          for i in {1..10}; do
            if curl -f http://100.106.201.33:3001/health; then
              echo "Container is healthy"
              break
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done

      - name: Run security tests
        run: |
          echo "Running security tests..."
          # Test HTTPS headers
          curl -I http://100.106.201.33:3001 | grep -i "x-frame-options\|x-content-type-options\|x-xss-protection"
          
          # Test for exposed sensitive files
          curl -o /dev/null -s -w "%{http_code}" http://100.106.201.33:3001/.env | grep -q "404"
          curl -o /dev/null -s -w "%{http_code}" http://100.106.201.33:3001/.git | grep -q "404"
          
          echo "Security tests passed"

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          # Test page load time
          curl -o /dev/null -s -w "Total time: %{time_total}s\n" http://100.106.201.33:3001
          
          # Test concurrent connections
          for i in {1..10}; do
            curl -s http://100.106.201.33:3001 > /dev/null &
          done
          wait
          
          echo "Performance tests passed"

      - name: Run functional tests
        run: |
          echo "Running functional tests..."
          # Test main page loads
          curl -s http://100.106.201.33:3001 | grep -q "TR-808 AI"
          
          # Test static assets
          curl -s http://100.106.201.33:3001 | grep -q "Tone.js"
          
          # Test health endpoint
          curl -f http://100.106.201.33:3001/health
          
          echo "Functional tests passed"

  # Deploy to production (VPS)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, test-dev-gpu]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.deploy_to_production == 'true' || contains(github.event.head_commit.message, '[deploy]'))
    environment: production
    steps:
      - name: Deploy to production VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 100.96.28.69
          username: root
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Update production container with zero-downtime deployment
            docker stop tr808-prod-new || true
            docker rm tr808-prod-new || true
            
            # Start new container on temporary port
            docker run -d \
              --name tr808-prod-new \
              --restart unless-stopped \
              -p 3002:80 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Health check
            sleep 10
            if curl -f http://localhost:3002; then
              # Switch traffic (nginx proxy update would go here)
              docker stop tr808-prod || true
              docker rm tr808-prod || true
              docker rename tr808-prod-new tr808-prod
              docker stop tr808-prod
              docker run -d \
                --name tr808-prod \
                --restart unless-stopped \
                -p 80:80 \
                -p 443:443 \
                ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              echo "Production deployment successful"
            else
              echo "Health check failed, rolling back"
              docker stop tr808-prod-new
              docker rm tr808-prod-new
              exit 1
            fi

  # Notification and monitoring
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "ðŸŸ¢ Production deployment successful"
            echo "Production URL: https://your-domain.com"
          elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "ðŸŸ¡ Staging deployment successful"
            echo "Staging URL: http://100.106.201.33:3001"
          else
            echo "ðŸ”´ Deployment failed"
          fi